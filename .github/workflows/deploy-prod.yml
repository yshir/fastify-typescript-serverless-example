name: deploy:prod

on:
  workflow_run:
    workflows:
      - test
    branches:
      - master
    types: completed

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Abort the deployment if the test failed
        if: ${{ github.event.workflow_run.conclusion != 'success' }}
        run: |
          echo "::error:: Test was failed. Abort"
          exit 1

      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: |
          npm install serverless -g
          npm install

      # - name: Generate .env
      #   run: |
      #     aws ssm get-parameters-by-path \
      #       --path ${{ secrets.AWS_PARAMETER_STORE_PREFIX }}/production \
      #       --region ${{ secrets.AWS_PARAMETER_STORE_REGION }} \
      #       --with-decryption \
      #       | jq -r -c '.Parameters[]|"\(.Name|split("/")[-1])=\(.Value)"' > .env
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEPLOY_USER_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEPLOY_USER_SECRET_ACCESS_KEY }}

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1

      - name: Deploy to AWS Lambda
        run: |
          echo "[WARN] Not implemented"
        env:
          APP_ENV: production
          NODE_ENV: production
          REVISION_HASH: ${{ github.sha }}
          REVISION_TIMESTAMP: ${{ steps.time.outputs.time }}
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_DEPLOY_USER_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_DEPLOY_USER_SECRET_ACCESS_KEY }}
          # AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}

      # - name: Notify result to slack
      #   uses: homoluctus/slatify@master
      #   if: always()
      #   with:
      #     type: ${{ job.status }}
      #     job_name: '*Auto Deploy to Production*'
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
